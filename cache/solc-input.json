{
  "language": "Solidity",
  "sources": {
    "contracts/quadraticBallot.sol": {
      "content": "pragma solidity >0.6.99 <0.8.0;\n\ncontract quadraticBallot {\n\n    struct Voter {  \n        uint vote;\n        uint balance;\n    }\n\n    struct Proposal {\n        bytes32 name;   // short name (up to 32 bytes)\n        uint voteCountFor; // number of accumulated votes for\n        uint voteCountAgainst; // number of accumulated votes against\n        bool votingOpen;\n    }\n\n    address public chairperson;\n    mapping(address => Voter) public voters;\n    //temporarily restricting to max length of 1 proposals for simplicity issua#1A\n    mapping(address => uint) public voterFreq1;\n    Proposal[] public proposals;\n    uint public startingBalance;\n    uint public winningDirection;\n    \n    //currently am not sure how to pass an array of strings into here from the api side \n    constructor(uint32 balanceAmount) {\n\n        startingBalance= balanceAmount;\n        chairperson = msg.sender;\n\n        // for(uint i =0; i < proposalNames.length ;i++){\n            proposals.push(Proposal(\n                { \n                    name: 'test',\n                    voteCountFor: 1,\n                    voteCountAgainst : 0,\n                    votingOpen : true\n                }));\n        // }\n    }\n\n    function vote(uint proposalName, uint direction) public{\n        //we dont allow vote canceling in terms of user balance\n        //(i.e  balanceBefore voteFor & voteAgainst (proposal1) == balanceAfter)\n        Voter storage sender = voters[msg.sender];\n        //init freq value as fix to #1A\n        //cant do a balance for now\n        require(sender.balance >= voterFreq1[msg.sender], \"Balance too low\");\n        require(proposals[proposalName].votingOpen==true);\n\n        //direction == 0 means against \n        if (direction ==0){\n            //subtract balance\n            sender.balance -= voterFreq1[msg.sender];\n            //increase voteCount for proposal\n            proposals[proposalName].voteCountAgainst++; //voterFreq1[msg.sender]; //idk if this works either\n            //increase cost for next vote for user\n            voterFreq1[msg.sender]*=2;\n        }\n        else{\n            //subtract balance\n            sender.balance -= voterFreq1[msg.sender];\n            //increase voteCount for proposal\n            proposals[proposalName].voteCountFor++; //voterFreq1[msg.sender]; //idk if this works either\n            voterFreq1[msg.sender]**2;\n        }\n    }\n\n\n    function registerVoter() public{\n        voters[msg.sender].balance = startingBalance;\n        voterFreq1[msg.sender]=1;\n    }\n\n    //disable voting and finalize winner\n    function closeVote(uint proposalName) public{\n        require(msg.sender == chairperson);\n        proposals[proposalName].votingOpen = false;\n        if( proposals[proposalName].voteCountFor > proposals[proposalName].voteCountAgainst){\n            winningDirection = 1;\n        }\n        else{\n            //direction == 0 means against\n            winningDirection = 0;\n        }\n    }\n\n    //getters\n\n    function getChairPerson() public view returns(address){\n        return chairperson;\n    }\n\n    function getVoteCountFor(uint proposalName) public view returns(uint){\n        return proposals[proposalName].voteCountFor;\n    }\n\n    function getVoteCountAgainst(uint proposalName) public view returns(uint){\n        return proposals[proposalName].voteCountAgainst;\n    }\n\n    function getBalance() public view returns(uint){\n        return voters[msg.sender].balance;\n    }\n\n    function getWinner() public view returns(uint){\n        return winningDirection;\n    }\n\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}